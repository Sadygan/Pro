
function priceNetto (upf, discount_factory) {
    return upf - (upf * discount_factory/100)
}

function calculateSumSize(width, height, depth, percent_v){
    var v = width*height*depth
    return (v*percent_v/100)+v
}
 
function calculatePercentMinus(a, b) {
    return a - (a / 100 * b)
}

function calculatePercentPlus(a, b) {
    return a + (a / 100 * b)
}

function calculatePercentBankDelivery(summa_netto, cost, execution_document, check_factory,  bank_service, bank_percent, v_sum, additional_deliver) {
    // console.log(summa_netto, cost, execution_document, check_factory,  bank_service, bank_percent, v_sum, additional_deliver)
    return (summa_netto+bank_service+(summa_netto+bank_service)*bank_percent/100+execution_document+check_factory+(cost+additional_deliver)*v_sum).toFixed(2)
}

function unitPriceNetto(percent, upf, add_discount, incr_discount) {
    var d1 = calculatePercentMinus(upf, percent);
    var d2 = calculatePercentMinus(d1, add_discount);
    var d3 = calculatePercentPlus(d2, incr_discount);
    return d3;
}

function multiplication(a, b) {
    return a * b;
}

function minus(a, b) {
    return a - b
}

function multiplicationSumm(value, numberOf) {
    return value * numberOf + value;
}

var getSomeData = function() {
  var data;

    $.ajax({
        url: '/deliveries/',
        dataType: 'json',
        success: function(resp) {
            data = resp.people;
        }
    });

  return data;
}

// Cloning object
function clone(obj) {
    if(obj == null || typeof(obj) != 'object') {
        return obj;
    }
    var temp = {};
    for(var key in obj) {
        temp[key] = clone(obj[key]);
    }
    return temp;
}

//Getting delivery data in selecting 
function getDelivery(data, delivery_text) {
    var deliv = clone(data[0]);

    if (delivery_text == "") {
        for(var p in deliv) {
                deliv[p] = 0;
        }
        return deliv;
    }

    for (var p in data) {
        if (data[p].direction == delivery_text) {
            return  data[p];
        }
    };
};

function ourInterest(summa_netto, percent){
    return (summa_netto*100/(100-percent)).toFixed(2)
}

function architectorPercent(with_interest, architector) {
    return 100-(with_interest-architector)/with_interest*100;
}

function devision(with_interest, summa_netto) {
    return with_interest/summa_netto;
}

function NanOrNoNan(res) {
    if (isNaN(res)) {
        return 0;
    } else {
        return res;                         
    };
};

function ckeckSize(width, height, depth, percent_v) {
	
	var unit_v_t = $('#table_specification_unit_v')
	// console.log(unitV)
    if(width > 0 || height > 0 || depth > 0) {
        if(unit_v_t) { 
            unit_v_t.remove();
            var vep = calculateSumSize(width, height, depth, percent_v)
            vep.toFixed(2);
            console.log(vep)
            $('#unit_v').html('<span>'+vep+'</span>');
            return false
        }
    }
    
    if(width == 0 && height == 0 && depth == 0 && percent_v >= 0) {
        if (!($("input").is("#table_specification_unit_v"))) {            
            $('#unit_v').html('<input step="0.1" type="number" name="table_specification[unit_v]" id="table_specification_unit_v">');  
            return true
        }
    }
}

function tableCheckSize(width, height, depth, percent_v, unit_v_t, id, group_id, project_id, specification_id, unitV) {
    console.log(width, height, depth, percent_v, unit_v_t, id)
    // console.log(width, height, depth, percent_v, unit_v_t, id)
    var vep = calculateSumSize(width, height, depth, percent_v)
    console.log(vep)
    if(width > 0 || height > 0 || depth > 0) {
        if(unit_v_t) { 
            $(unit_v_t).replaceWith('<td class="unitv" id="best_in_place_table_specification_'+id+'_unit_v">'+vep.toFixed(2)+'</td>');
        }
    }

    if(width == 0 && height == 0 && depth == 0 && percent_v >= 0) {
    	// console.log("zero")
    	if($('#unitv_'+id)) {
	    	var temp = $('#unit_v_'+id);
	    	var text = $('#clone_unit_v_'+id).text();
            // $(temp).replaceWith("<td class='unitv' id='unit_v_"+id+" data-html-attrs="+group_id+">"+text+"</td>")
	    	console.log(id, group_id, project_id, specification_id)
            if(isNaN(group_id)) {
                group_id = 0
            }
            $(temp).replaceWith('<span class="best_in_place" id="best_in_place_table_specification_'+id+'_unit_v" data-url="/projects/'+project_id+'/specifications/'+specification_id+'/table_specifications/'+id+'" data-object="table_specification" data-bip-attribute="unit_v" data-type="input" data-html-attrs="'+group_id+'">'+unitV+'</span>')

	   	}
    }
}

function isntNan(prv, prv_) {
		if (isNaN(prv)) {
    	return prv = prv_
    } else {
    	return prv
    }
}


Array.prototype.uniq = function(){
    return this.filter(function (elem, pos, arr) {
        return arr.indexOf(elem) == pos;
    });
};

// Comparison element in array
function in_array(needle, haystack, strict) {   // Checks if a value exists in an array
    // 
    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)

    var found = false, key, strict = !!strict;

    for (key in haystack) {
        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {
            found = true;
            break;
        }
    }

    return found;
}

// Group function
function groupArrSum(class_group, group_id, current_val) {
    // console.log(class_group, group_id, current_val)
    vals = []
    $(class_group+" [data-html-attrs="+group_id+"]").each(function() {
        if (this.textContent != "")
            vals.push(parseFloat(this.textContent))
        else
            vals.push(this.textContent)
    });
    if (in_array_element("", vals)) {
        indexSpace = vals.indexOf("");
        vals[indexSpace] = current_val
    }
    
    var count = 0;
    vals.forEach(function(value, index) {
        count += +value;
    });
    return count;
}

function in_array_element(value, array) {
    for(var i = 0; i < array.length; i++) 
    {
        if(array[i] == value) return true;
    }
    return false;
}

function printSum(print, specification_id, url) {
        console.log(print)
        
        // var p = {'specification': {'print_sum': print}};

        $.ajax({
            // url: '../'+specification_id,
            url: url,
            type: 'PUT',
            dataType: 'json',
            data: print,

            async: true,
            error: function() {
                // alert("Войдите через страницу проекты")
            },
            success: function (data) {

         }
    });
}

function percent_of_number(summa_netto, sum_summa_netto) {
    return (summa_netto/sum_summa_netto*100).toFixed(2)
}

function group_sum_price_with_inerest(percent_of_number, sum_with_interest) {
    return (sum_with_interest / 100 * percent_of_number).toFixed(2)
}

function group_unit_price_with_inerest(group_sum_price_with_interest, number_of) {
    return (group_sum_price_with_interest/number_of).toFixed(2)
}